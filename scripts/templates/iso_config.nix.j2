{ lib, pkgs, ... }:
let 
  disko = "${builtins.fetchTarball "https://github.com/nix-community/disko/archive/{{disko_version}}.tar.gz"}";
in {
  imports = [ 
    ../../modules 
    # partitioning
    "${disko}/module.nix"
  ];

  hostname = "{{hostname}}";
  interface= "{{host.interface}}";
  ip = "{{host.ip}}";
  {% if host.ip != "dhcp" -%}
  netmask = {{host.netmask}};
  subnet = "{{host.subnet}}";
  gateway = "{{host.gateway}}";
  {%- endif %}
  admin = {
    hashedPwd = ''{{host.admin.hashedPwd}}'';
    name = "{{host.admin.name}}";
    sshKeys = [
      {%- for key in host.admin.sshKeys %}
        ''{{key}}''
      {% endfor -%}
      ];
  };
  


  # copy all configuration files
  environment.etc = {
    "nixos/modules" = { source = ../../modules; };
    "nixos/partitioning.nix" = { source = ../../partitioning/{{hostname}}.nix; };
    "nixos/configuration.nix" = {
      text = ''
        { config, ... }:{
          imports = [
            ./modules ./hardware-configuration.nix
            "${disko}/module.nix"
            ./partitioning.nix
          ];

          hostname = "{{hostname}}";
          interface= "{{host.interface}}";
          ip = "{{host.ip}}";
          {% if host.ip != "dhcp" -%}
          netmask = {{host.netmask}};
          subnet = "{{host.subnet}}";
          gateway = "{{host.gateway}}";
          {%- endif %}
          admin = {
            hashedPwd = '''{{host.admin.hashedPwd}}''';
            name = "{{host.admin.name}}";
            sshKeys = [
              {%- for key in host.admin.sshKeys %}
                '''{{key}}'''
              {% endfor -%}
              ];
          };
          services.openssh.enable = true;
          networking.firewall.allowedTCPPorts = config.services.openssh.ports;
          {% if not legacy -%}
          boot.loader.systemd-boot.enable = true;
          boot.loader.efi.canTouchEfiVariables = true;
          {%- else %}
          # boot.loader.grub.device = "/dev/disk/by-partlabel/disk-nixos-boot";
          {%- endif %}
         }
      '';
    };
  };
  environment.systemPackages = 
  let 
    # wrap install scripts in a package
    setup = pkgs.writeScriptBin "setup" ''
      {{setup_script|indent(6)}}
    '';
  in with pkgs;
  [
    dig
    emacs
    #disko
    (pkgs.callPackage "${disko}/package.nix"{})
    setup
    bash
    git
    nixfmt
    parted
    vim
  ];

  {% if autoinstall -%}
  # Systemd script for automatic setup
  # Logs for debug: journalctl -u system_setup.service -b
  systemd.services.system_setup = {
    path = with pkgs; [
      bash
      coreutils
      dig
      e2fsprogs
      git
      mount
      nix
      nixos-install-tools
      parted
      partition
      setup
      sudo
      umount
      util-linux
    ];
    after = ["network-online.target"];
    wants = ["network-online.target"];
    wantedBy = [ "multi-user.target" ];
    requires = [ "network-online.target" "nss-lookup.target" "nix-deamon.service" ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = "yes";
    };
    script = ''
      setup
      systemctl --force poweroff
    '';
  };
  {%- endif %}
}
